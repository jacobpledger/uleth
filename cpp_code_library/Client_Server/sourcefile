01]A Tutorial to Linux Socket Programming in C++
02]
03]Before we go jumping into the real code, we should briefly go over the set of steps in a typical client-server connection. First, the server creates a listening socket, and waits for connection attempts from clients. The client creates a socket on its side, and attempts to connect with the server. The server then accepts the connection, and data exchange can begin. Once all data has been passed through the socket connection, either endpoint can close the connection.
04]
05]Now it is time to dig into the code. We will create both a client and a server that perform all of the steps outlined above. We will implement these operations in the order they typically happen - i.e. first we'll create the server portion that listens to the socket, next we'll create the client portion that connects to the server, and so on. All of the code in this section can be found in server.cpp and client.cpp.
06]
07]Server - establishing a listening socket
08]
09]The first step we need to do is create a simple server that listens for incoming requests from clients. Here is the code required to establish a server socket:
10]
11]Creating a server socket (See server.cpp for the complete program).
12]
13]The constructor for the ServerSocket class calls the necessary socket functionss to set up the listener socket. It hides the details from you, so all you have to do is create an instance of this class to begin listening on a local port.
14]
15]Notice the try/catch block. The ServerSocket and ClientSocket classes use the exception-handling feature of C++. If a class method fails for any reason, it throws an exception of type SocketException, which is defined in SocketException.h. Not handling this exception results in program termination. You can get the text of the error by calling SocketException's description() function as shown above.
16]
17]Client - connecting to the server
18]
19]The second step in a typical client-server connection is the client's responsibility - to attempt to connect to the server.
20]
21]Creating a client socket (See client.cpp for the complete program).
22]
23]By simply creating an instance of the ClientSocket class, you create a linux socket, and connect it to the host and port you pass to the constructor. Like the ServerSocket class, if the constructor fails for any reason, an exception is thrown.
24]
25]Server - accepting the client's connection request
26]
27]The next step of the client-server connection occurs within the server. It is the responsibility of the server to accept the client's connection attempt, which opens up a channel of communication between the two socket endpoints.
28]
29]We have to add this functionality to our simple server. Here is the updated version:
30]
31]Accepting a client connection (See server.cpp for the complete program).
32]
33]Accepting a connection just requires a call to the accept method. This method accepts the connection attempt, and fills new_sock with the socket information about the connection. We'll see how new_sock is used in the next section.
34]
35]Client and Server - sending and receiving data
36]
37]Now that the server has accepted the client's connection request, it is time to send data back and forth over the socket connection.
38]
40]An advanced feature of C++ is the ability to overload operators - or simply, to make an operator perform a certain operation. In the ClientSocket and ServerSocket classes I overloaded the << and >> operators, so that when used, they wrote data to and read data from the socket. Here is the updated version of the simple server:
41]
42]A simple meaningful server (See server.cpp for the complete program).
43]
44]The new_sock variable contains all of our socket information, so we use it to exchange data with the client. The line "new_sock >> data;" should be read as "read data from new_sock, and place that data in our string variable 'data'." Similarly, the next line sends the data in 'data' back through the socket to the client.
45]
46]A simple meaningful client (See client.cpp for the complete program).
47]We send the string "Test Message." to the server, read the response from the server, and print out the response to std output.
48]
49]Compiling and Testing Our Client And Server
50]Now that we have gone over the basic usage of the ClientSocket and ServerSocket classes, we can build the whole project and test it.